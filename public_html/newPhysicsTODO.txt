FURTHER DOWN THE LINE:
	add InputBuffer heap. Inputs that end up ignored upon happening may be buffered. This buffer is checked on relevent events (jump buffered on a new collision? etc).

	COLLISION TESTING:				Collision.js
		Implement line against line collision checking and use in getCollisionData, as well as using current end radius collision checking. 
				Greatly reduces chance of missing a collision based on frame aliasing. Still use a max step distance OR test how different old velocity angle was from new velocity angle to determine whether to tween-test for more accurate motion profile. UNDERSTAND THIS WILL BE COSTLY, MAY REQUIRE GETTING RID OF BRUTE FORCE COLLISION CHECKS.
				Uses the line between the balls original center pos and the balls resulting center pos. Then offsets that line in both perpendicular directions by radius. These lines are checked for collisions as well as the balls ending position.
	COLLISION HANDLING:				Physics.js
		BOUNCE:
			Handle case where two surfaces are legit hit at the same time. Average their normals? Alternately handle them in deterministic sequence
			

			
			
LINKAGE!
	Lots of fun physics stuff, but doesnt talk about how to determine what time things happened at.	http://ai.eecs.umich.edu/soar/Classes/494/talks/Lecture%205%20Basic%20Physics.pdf
	Moving circle to static circle collisions, adapt to circle to point collisions???				http://www.heroicvirtuecreations.com/2DCollisions.html
	Awesome but really in depth paper about predictive game engine design:							http://floppsie.comp.glam.ac.uk/Papers/paper21/ieee.pdf
	
